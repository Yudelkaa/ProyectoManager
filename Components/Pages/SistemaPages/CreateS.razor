@page "/CreateS"
@rendermode InteractiveServer
@inject SistemasService sistemasService
@inject NavigationManager NavigationManager

<PageTitle>Crear Nuevo Sistema</PageTitle>
<EditForm Model="sistema" OnValidSubmit="Crear">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">

			@*Header*@
			<div class="card-header">
				<div class="card-header alert-secondary" style="color: white; background-color: royalblue;">
					<NavLink class="btn btn-light float-end" href="/DetailsS">Consultar Clientes</NavLink>
					<h1><strong>Registrar</strong></h1>
					<h3>Sistema</h3>
				</div>
				@*Body*@
				<div class="card-body">
					<div class="input-group mb-3>
						@*Id*@
						<div class="mb-3">
							<div class="col-4">
								<label class="form-label" for="ID"><strong>Id:</strong></label>
								<InputNumber id="ID" class="form-control" @bind-Value="sistema.ID"></InputNumber>
							</div>
						</div>
					@*Nombre*@
						<div class="mb-3">
							<div class="col-4">
								<label class="form-label" for="nombre"><strong>Nombre:</strong></label>
								<InputText id="nombre" class="form-control" @bind-Value="sistema.Nombre" placeholder="Escriba un nombre para el sistema"></InputText>
								<ValidationMessage For="@(() => sistema.Nombre)"></ValidationMessage>
							</div>
						</div>
					</div>
				@*Boton*@
					<div class="card-footer d-flex ">
						<div class="px-2">
							<button type="button" class="btn btn-primary" @onclick="VolverAInicio">Volver</button>

							<button type="submit" class="btn btn-success">
								<i class="bi bi-floppy" /> Guardar
							</button>
						</div>
					</div>
				</div>
			@mensaje
			</div>
		</div>

</EditForm>

@code {
	public Sistemas sistema { get; set; } = new Sistemas();
	public string mensaje { get; set; } = string.Empty;

	public async Task Crear()
	{
		if (await Validar())
			mensaje = "Vuelva a intentarlo";
		else
		{
			var crear = await sistemasService.Crear(sistema);
			if (crear)
			{
				mensaje = "Creado correctamente";
				await Task.Delay(2000);
				LimpiarPantalla();
			}
			else
				mensaje = "Error";
		}
	}

	public async Task<bool> Validar()
	{
		var validar = await sistemasService.BuscarSistema(sistema.Nombre);
		if (validar != null)
			return true;

		return false;
	}

	public void LimpiarPantalla()
	{
		sistema = new Sistemas();
		mensaje = string.Empty;
	}

	void VolverAInicio()
	{
		NavigationManager.NavigateTo("/sistemas");
	}
}